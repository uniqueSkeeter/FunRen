package com.fr.station.component.card.dao.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.QueryException;
import org.springframework.stereotype.Repository;

import com.fr.station.common.bean.CardInfoBean;
import com.fr.station.common.consts.SqlConsts;
import com.fr.station.common.data.ApplicationContext;
import com.fr.station.common.entity.card.CardEntity;
import com.fr.station.common.utility.DateUtil;
import com.fr.station.common.utility.ErrorLogUtil;
import com.fr.station.common.utility.StringUtil;
import com.fr.station.component.card.dao.CardInfoDAO;
import com.fr.station.component.system.dao.AbstractBaseDAO;

/**
 * 卡片明细的DAO的实现
 *
 * @author _yy
 */
@Repository
public class CardInfoDaoImpl extends AbstractBaseDAO<CardEntity> implements CardInfoDAO {

	// ------- Constants (static final) ----------------------------------------
	private static Logger log = Logger.getLogger(CardInfoDaoImpl.class);

	// ------- Static Variables (static) ---------------------------------------

	private static final String CARD_NO = "cardno";

	private static final String STATION_NO = "stationNo";

	// 获得主卡下所有副卡信息

	private final String selectViceCardsListSql = "select card.guestName, card.cardNo, card.cardStatus,guest.guestNo,cardTZ.pre,guestdep.depName,guest.cardno as mainCardno,card.id from FK_T_GUEST guest, FK_T_CARD card, FK_T_CardTZ cardTZ,FK_T_GUESTDEP guestdep where ";

	// 获得副卡数量
	private final String selectAllCountViceCardsListSql = "select count(*) from FK_T_GUEST guest, FK_T_CARD card, FK_T_CardTZ cardTZ,FK_T_GUESTDEP guestdep where ";

	// ------- Instance Variables (private) ------------------------------------
	/**
	 * 查询卡片明细SQL
	 */
	private final String getCardInfoHql = "FROM CardEntity WHERE  ";

	// ------- Constructors ----------------------------------------------------

	public CardInfoDaoImpl() {
		super();
	}

	// ------- Instance Methods (public) ---------------------------------------

	/**
	 * 得到个人卡片的内容
	 */
	@Override
	public CardInfoBean getCardInfo(CardInfoBean cardInfoBean) throws Exception {
		CardInfoBean resultCardBean = null;
		try {
			// retrieve search value from client request.
			StringBuilder builder = this.validateInputCardCriteria(cardInfoBean);
			CardEntity cardEntity = null;
			// 执行查询语句
			List<CardEntity> cardEntityList = this.findByHql(this.getCardInfoHql + builder);
			if (cardEntityList.size() > 0) {
				cardEntity = cardEntityList.get(0);
			}
			// get result list.
			resultCardBean = this.convertDataToBean(cardEntity);
		} catch (QueryException e) {
			log.info("Sql is not correct, please check it again, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		} catch (Exception e) {
			log.info("Get card detail info occured error, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		}
		return resultCardBean;
	}

	/**
	 * 得到司机卡的内容
	 */
	/*
	 * @Override public List<CardInfoBean> getDriverCardInfo(CardInfoBean cardInfoBean) throws Exception {
	 * List<CardInfoBean> resultList = null; try { // retrieve search value from client request. StringBuilder builder =
	 * this.validateInputDriverCardCriteria(cardInfoBean);
	 *
	 * // retrieve current query by input sql. Query query = this.createSpecifiedQuery(builder, this.getCardInfoHql);
	 *
	 * // get result list. List<Object[]> result = query.list();
	 *
	 * resultList = this.convertDataToBean(result); } catch (QueryException e) {
	 * log.info("Sql is not correct, please check it again, more detail please see the detail log" + e.getMessage() +
	 * "\n" + ErrorLogUtil.printInfo(e)); } catch (Exception e) {
	 * log.info("Get card detail info occured error, more detail please see the detail log" + e.getMessage() + "\n" +
	 * ErrorLogUtil.printInfo(e)); } return resultList; }
	 */

	/**
	 * Inherited java doc
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<CardInfoBean> getViceCardsRecordsByCriteria(CardInfoBean cardInfoBean) {
		List<CardInfoBean> resultList = null;
		try {
			// retrieve search value from client request.
			StringBuilder builder = this.validateInputCriteria(cardInfoBean);

			// retrieve current query by input sql.
			Query query = this.createSpecifiedQuery(builder, this.selectViceCardsListSql);

			// get total records by specified sql.
			int totalSize = this.getTotalCount(builder, this.selectAllCountViceCardsListSql);

			// this is for pagination.
			this.setPaginationNumber(cardInfoBean, query);

			// get result list.
			List<Object[]> result = query.list();

			resultList = this.convertDataToBean(result, totalSize);

		} catch (QueryException e) {
			log.info("Sql is not correct, please check it again, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		} catch (Exception e) {
			log.info("Get DB data occured error, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		}
		return resultList;

	}

	// ------- Instance Methods (private) --------------------------------------

	/**
	 * 增加SQL判断条件
	 */
	private StringBuilder validateInputCardCriteria(CardInfoBean cardInfoBean) {
		StringBuilder builder = new StringBuilder();
		// FK_T_CARD,FK_T_GUEST,FK_T_CARDTZ,FK_T_GUESTACC表关联
		// FK_T_CARD,FK_T_GUEST通过客户编号guestNo关联，FK_T_CARD，FK_T_CARDTZ通过card的ID关联
		// FK_T_GUEST,FK_T_GUESTACC通过客户编号guestNo关联
		if (ApplicationContext.getInstance().getStationNum() != null) {
			builder.append(STATION_NO).append(SqlConsts.EQUAL)
					.append(Integer.valueOf(ApplicationContext.getInstance().getStationNum())).append(SqlConsts.ADD);
		}
		if (StringUtils.isNotEmpty(cardInfoBean.getCardNo())) {
			builder.append(CARD_NO).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES).append(cardInfoBean.getCardNo())
					.append(SqlConsts.SINGLE_QUOTES);
		}
		return builder;
	}

	private StringBuilder validateInputDriverCardCriteria(CardInfoBean cardInfoBean) {
		StringBuilder builder = new StringBuilder();
		// FK_T_CARD,FK_T_GUEST,FK_T_CARDTZ,FK_T_GUESTACC表关联
		// FK_T_CARD,FK_T_GUEST通过客户编号guestNo关联，FK_T_CARD，FK_T_CARDTZ通过card的ID关联
		// FK_T_GUEST,FK_T_GUESTACC通过客户编号guestNo关联
		if (ApplicationContext.getInstance().getStationNum() != null) {
			builder.append(STATION_NO).append(SqlConsts.EQUAL)
					.append(Integer.valueOf(ApplicationContext.getInstance().getStationNum())).append(SqlConsts.ADD);
		}
		if (cardInfoBean.getId() != null) {
			builder.append("card.id").append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES).append(cardInfoBean.getId())
					.append(SqlConsts.SINGLE_QUOTES);
		}
		return builder;
	}

	/**
	 *
	 * 为获得副卡信息构建where条件
	 *
	 * @param CardInfoBean cardInfoBean
	 * @return StringBuilder
	 */

	private StringBuilder validateInputCriteria(CardInfoBean cardInfoBean) {
		StringBuilder builder = new StringBuilder();
		builder.append("guest.stationNo").append(SqlConsts.EQUAL)
				.append(Integer.valueOf(ApplicationContext.getInstance().getStationNum()));
		if (StringUtil.isNotEmpty(cardInfoBean.getMainCardNo())) {
			builder.append(SqlConsts.ADD).append("guest.cardno").append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardInfoBean.getMainCardNo()).append(SqlConsts.SINGLE_QUOTES);
		}
		builder.append(SqlConsts.ADD).append("guest.guestno").append(SqlConsts.EQUAL).append("card.guestno");
		builder.append(SqlConsts.ADD).append("card.cardno").append(SqlConsts.EQUAL).append("cardTZ.cardno");
		builder.append(SqlConsts.ADD).append("card.depno").append(SqlConsts.EQUAL).append("guestdep.depno");

		return builder;
	}

	/**
	 * 将data转换为bean
	 */
	private CardInfoBean convertDataToBean(CardEntity cardEntity) {
		CardInfoBean cardInfoBean = null;
		//temporary save the card cash
		ApplicationContext.getInstance().setCardEntity(cardEntity);
		if (cardEntity != null) {
			cardInfoBean = new CardInfoBean();
			if (cardEntity.getCardno() != null) {
				cardInfoBean.setCardNo(cardEntity.getCardno());
			}
			if (cardEntity.getCardtype() != null) {
				cardInfoBean.setCardType(cardEntity.getCardtype());
			}
			if (cardEntity.getDeposit() != null) {
				cardInfoBean.setDeposit(cardEntity.getDeposit());
			}
			if (cardEntity.getEnddate() != null) {
				cardInfoBean.setDisEffectiveDate(String.valueOf(cardEntity.getEnddate()));
			}
			if (cardEntity.getCardstatus() != null) {
				cardInfoBean.setCardStatus(cardEntity.getCardstatus());
			}
			if (cardEntity.getGuestname() != null) {
				cardInfoBean.setGuestName(cardEntity.getGuestname());
			}
			if (cardEntity.getGuesttype() != null) {
				cardInfoBean.setGuestType(cardEntity.getGuesttype());
			}
			if (cardEntity.getGuestnum() != null) {
				cardInfoBean.setGuestNum(cardEntity.getGuestnum());
			}
			if (cardEntity.getGuesttel() != null) {
				cardInfoBean.setGuestTel(cardEntity.getGuesttel());
			}
			if (cardEntity.getGender() != null) {
				cardInfoBean.setGender(cardEntity.getGender());
			}
			if (cardEntity.getEmail() != null) {
				cardInfoBean.setEmail(cardEntity.getEmail());
			}
			if (cardEntity.getGuestpost() != null) {
				cardInfoBean.setZipCode(cardEntity.getGuestpost());
			}
			if (cardEntity.getGuestadd() != null) {
				cardInfoBean.setCustomerAddr(cardEntity.getGuestadd());
			}
			if (cardEntity.getCreateDate() != null) {
				cardInfoBean.setCreateDate(DateUtil.formatDate(cardEntity.getCreateDate(), DateUtil.DATE_PATTERN_17));
			}
			if (cardEntity.getBz() != null) {
				cardInfoBean.setRemark(cardEntity.getBz());
			}
			if (cardEntity.isPassFlag()) {
				cardInfoBean.setPassFlag("Y");
			} else {
				cardInfoBean.setPassFlag("N");
			}
			if (cardEntity.getXcarno() != null) {
				cardInfoBean.setCarNoConstr(cardEntity.getXcarno());
			}
			if (cardEntity.getXcount() != null) {
				cardInfoBean.setRefuelTimes(cardEntity.getXcount());
			}
			if (cardEntity.getXamn() != null) {
				cardInfoBean.setConsumeAmount(cardEntity.getXamn());
			}
			if (cardEntity.getXvol() != null) {
				cardInfoBean.setRefuelLimit(cardEntity.getXvol());
			}
			if (cardEntity.getXoil() != null) {
				cardInfoBean.setOilTypeLimit(cardEntity.getXoil());
			}
			if (cardEntity.getBillType() != null) {
				cardInfoBean.setBillType(cardEntity.getBillType());
			}
			if (cardEntity.getXeare() != null) {
				cardInfoBean.setStationInfoLimit(cardEntity.getXeare());
			}
			if (cardEntity.getId() != null) {
				cardInfoBean.setId(Integer.valueOf(cardEntity.getId()));
			}
		}

		return cardInfoBean;
	}

	/**
	 *
	 * 将查询到的副卡信息放入javabean中
	 *
	 * @param dataResult
	 * @return CardInfoBean 的 List
	 */

	private List<CardInfoBean> convertDataToBean(List<Object[]> dataResult, int totalAccount) {
		List<CardInfoBean> cardInfoBeanList = new ArrayList<CardInfoBean>();
		CardInfoBean cardInfoBean = null;
		for (Object[] dataRow : dataResult) {
			cardInfoBean = new CardInfoBean();
			cardInfoBean.setGuestName(String.valueOf(dataRow[0]));
			cardInfoBean.setCardNo(String.valueOf(dataRow[1]));
			cardInfoBean.setCardStatus(String.valueOf(dataRow[2]));
			cardInfoBean.setGuestNo(String.valueOf(dataRow[3]));
			cardInfoBean.setProvisionAccount(String.valueOf(dataRow[4]));
			cardInfoBean.setDepName(String.valueOf(dataRow[5]));
			cardInfoBean.setMainCardNo(String.valueOf(dataRow[6]));
			cardInfoBean.setId(Integer.valueOf(String.valueOf(dataRow[7])));
			cardInfoBean.setTotalData(totalAccount);
			cardInfoBeanList.add(cardInfoBean);
		}
		return cardInfoBeanList;
	}

	private void setPaginationNumber(CardInfoBean cardInfoBean, Query query) {
		query.setFirstResult(cardInfoBean.getStartNumber());
		query.setMaxResults(cardInfoBean.getTotalNumber());
	}

	private int getTotalCount(StringBuilder builder, String sql) throws Exception {
		List<?> dataResultList = this.findBySql(new StringBuilder().append(sql).append(builder).toString());
		if (dataResultList.size() > 0) {
			return (int) dataResultList.toArray()[0];
		}
		return 0;
	}

	private Query createSpecifiedQuery(StringBuilder builder, String sql) throws Exception {
		return this.getQueryByCriteria(new StringBuilder().append(sql).append(builder).toString());
	}

	// ------- Static Methods --------------------------------------------------

	// ------- Optional Inner Class ------------------------------------------

}
