package com.fr.station.component.customer.service.impl;

import java.sql.Timestamp;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.fr.station.common.bean.RegisterCustomerBean;
import com.fr.station.common.data.ApplicationContext;
import com.fr.station.common.data.DataCollections;
import com.fr.station.common.entity.card.FKTCardTZEntity;
import com.fr.station.common.entity.card.FKTGuestAcc;
import com.fr.station.common.entity.card.FKTGuestDep;
import com.fr.station.common.entity.card.FkTCardEntity;
import com.fr.station.common.entity.card.FkTGuestEntity;
import com.fr.station.common.utility.DateUtil;
import com.fr.station.component.customer.dao.RegistMultiCustomerDAO;
import com.fr.station.component.customer.dao.RegisterCustomerDAO;
import com.fr.station.component.customer.service.RegistMultiCustomerService;
import com.fr.station.component.system.service.impl.AbstractBaseService;

@Service
public class RegistMultiCustomerServiceImpl extends AbstractBaseService implements RegistMultiCustomerService {

	// ------- Constants (static final) ----------------------------------------

	private static Logger log = Logger.getLogger(RegistMultiCustomerServiceImpl.class);

	// ------- Static Variables (static) ---------------------------------------

	// ------- Instance Variables (private) ------------------------------------
	private RegistMultiCustomerDAO saleMultiUserCardDaoImpl;

	private RegisterCustomerDAO registerCustomerDaoImpl;

	// ------- Constructors ----------------------------------------------------
	public RegistMultiCustomerServiceImpl() {
		super();
	}

	// ------- Instance Methods (public) ---------------------------------------
	/**
	 * show Driver list
	 * 
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public List<RegisterCustomerBean> findDriverRecordsByCriteria(RegisterCustomerBean registerCustomerBean) {
		log.info("in findDriverRecordsByCriteria");
		int pageNumber = registerCustomerBean.getPageNumber();
		int pageSize = registerCustomerBean.getPageSize();
		// 当前页
		int intPage = pageNumber == 0 ? 1 : pageNumber;
		// 每页显示条数
		int number = pageSize == 0 ? 20 : pageSize;
		// 每页的开始记录 第一页为1 第二页为number +1
		int start = (intPage - 1) * number;
		log.info("out findDriverRecordsByCriteria");
		return this.saleMultiUserCardDaoImpl.getDriverRecordsByCriteria(registerCustomerBean, start, number);
	}

	/**
	 * show Department list
	 * 
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public List<RegisterCustomerBean> findDepRecordsByCriteria(RegisterCustomerBean registerCustomerBean) {
		log.info("in findDepRecordsByCriteria");
		int pageNumber = registerCustomerBean.getPageNumber();
		int pageSize = registerCustomerBean.getPageSize();
		// 当前页
		int intPage = pageNumber == 0 ? 1 : pageNumber;
		// 每页显示条数
		int number = pageSize == 0 ? 20 : pageSize;
		// 每页的开始记录 第一页为1 第二页为number +1
		int start = (intPage - 1) * number;
		log.info("out findDepRecordsByCriteria");
		return this.saleMultiUserCardDaoImpl.getDepRecordsByCriteria(registerCustomerBean, start, number);
	}

	/**
	 * 返回对应部门信息的bean
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED, readOnly = false)
	public List<RegisterCustomerBean> getDepByFormCondition(RegisterCustomerBean registerCustomerBean) {
		if (registerCustomerBean == null) {
			return null;
		}
		List<RegisterCustomerBean> depList = null;
		depList = this.saleMultiUserCardDaoImpl.getAllDepartment(registerCustomerBean);
		return depList;
	}

	/**
	 * addCustomer(multiUserCard mainCard)2014-7-25
	 */
	@SuppressWarnings("unchecked")
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void addCustomer(RegisterCustomerBean registerCustomerBean) {
		log.info("Persist registerCustomerBean entity begain");

		// construct guest entity
		FkTGuestEntity guestEntity = this.covertDataToGuestEntity(registerCustomerBean);

		// construct card entity
		FkTCardEntity cardEntity = this.convertDataToCardEntity(registerCustomerBean);

		// construct card account entity
		FKTCardTZEntity cardAccEntity = this.covertDataToCardAccEntity(registerCustomerBean);

		// construct guest account entity
		FKTGuestAcc guestAccEntity = this.covertDataToGuestAccEntity(registerCustomerBean);

		// get user guest number from system parameter table.
		Integer guestNo = this.registerCustomerDaoImpl.getGuestNo();

		// get class number from class info table.
		Object[] resultArray = this.registerCustomerDaoImpl.getClassNum();
		this.initializeClassInfoData(guestEntity, cardEntity, cardAccEntity, guestAccEntity, guestNo, resultArray);

		// set default value like date for below entity.
		this.initializeDefaultData(guestEntity, cardEntity, cardAccEntity, guestAccEntity, guestNo);

		// convert type value to digit which already define in the dictionary table
		this.convertTypeToDicValue(registerCustomerBean, cardEntity);

		// set bidirectional relationship
		this.setBidirectional(guestEntity, cardEntity, cardAccEntity, guestAccEntity);

		// persist guest entity
		this.save(guestEntity);
		this.save(cardEntity);
		this.save(cardAccEntity);
		this.save(guestAccEntity);
		// update table system parameter set attriValue plus one when guest info is successfully save into DB.
		this.registerCustomerDaoImpl.updateGuestNo();

		log.info("Succefully saved guest entity into DB");
	}

	/**
	 * addDepartment 2014-7-25
	 */
	@SuppressWarnings("unchecked")
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void addDepartment(RegisterCustomerBean registerCustomerBean) {
		log.info("Persist registerCustomerBean entity begain");

		// construct guestDep entity
		FKTGuestDep guestDepEntity = this.covertDataToGuestDepEntity(registerCustomerBean);
		// get department number from system parameter table.
		Integer depNo = this.saleMultiUserCardDaoImpl.getDepNo();
		// set depNo
		guestDepEntity.setDeptNo(String.valueOf(depNo));
		// set create_day
		guestDepEntity.setCreateDate(DateUtil.currentTimestamp());
		// persist guestDep entity
		this.save(guestDepEntity);
		// update table system parameter set attriValue plus one
		this.saleMultiUserCardDaoImpl.updateDepNo();

		log.info("Succefully saved guestDep entity into DB");
	}

	/**
	 * update department
	 */
	@SuppressWarnings("unchecked")
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void updateDepartment(RegisterCustomerBean registerCustomerBean) {
		log.info("in updateDepartment");
		FKTGuestDep guestDepEntity = this.covertDataToGuestDepEntity(registerCustomerBean);
		this.saveOrUpdate(guestDepEntity);
		log.info("out updateDepartment");
	}

	/**
	 * delete department
	 */
	@Override
	@Transactional(propagation = Propagation.REQUIRED)
	public void deleteDepartment(RegisterCustomerBean registerCustomerBean) {
		log.info("in deleteDepartment");
		FKTGuestDep guestDepEntity = this.covertDataToGuestDepEntity(registerCustomerBean);
		this.delete(guestDepEntity);
		log.info("out deleteDepartment");
	}

	@Autowired
	public void setRegistMultiCustomerDAO(RegistMultiCustomerDAO saleMultiUserCardDaoImpl) {
		super.setBaseDao(saleMultiUserCardDaoImpl);
		this.saleMultiUserCardDaoImpl = saleMultiUserCardDaoImpl;
	}

	@Autowired
	public void setRegisterCustomerDAO(RegisterCustomerDAO registerCustomerDaoImpl) {
		super.setBaseDao(registerCustomerDaoImpl);
		this.registerCustomerDaoImpl = registerCustomerDaoImpl;
	}

	// ------- Instance Methods (protected) ------------------------------------

	// ------- Instance Methods (private) --------------------------------------
	private void initializeClassInfoData(FkTGuestEntity guestEntity, FkTCardEntity cardEntity, FKTCardTZEntity cardAccEntity,
			FKTGuestAcc guestAccEntity, Integer guestNo, Object[] resultArray) {

		if (resultArray != null && resultArray.length == 3) {
			cardEntity.setAccDate(DateUtil.formatDate((Timestamp) resultArray[0], DateUtil.DATE_PATTERN_8));
			cardEntity.setAccNo((String) resultArray[1]);
			guestEntity.setBjid((Integer) resultArray[2]);
		}
	}

	private void initializeDefaultData(FkTGuestEntity guestEntity, FkTCardEntity cardEntity, FKTCardTZEntity cardAccEntity,
			FKTGuestAcc guestAccEntity, Integer guestNo) {
		// set new default date for guestEntity cardEntity.
		guestEntity.setCreateDate(DateUtil.currentTimestamp());
		cardEntity.setCreateDate(DateUtil.currentTimestamp());
		cardAccEntity.setCreateDate(DateUtil.currentTimestamp());
		guestAccEntity.setCreateDate(DateUtil.currentTimestamp());
		// set new customer number guestEntity cardEntity.
		cardEntity.setGuestNo(guestNo);
		guestEntity.setGuestno(guestNo);
		guestEntity.setGuestno(guestNo);
		guestAccEntity.setGuestNo(guestNo);
	}

	private void convertTypeToDicValue(RegisterCustomerBean registerCustomerBean, FkTCardEntity cardEntity) {
		// 把卡片类型的文字转换为数字
		final Map<String, String> dicUseType = DataCollections.dicUseType;
		for (final Entry<String, String> entry : dicUseType.entrySet()) {
			if (entry.getValue().trim().equalsIgnoreCase(registerCustomerBean.getCardType())) {
				cardEntity.setCardtype(entry.getKey());
				break;
			}
		}
	}

	private void setBidirectional(FkTGuestEntity guestEntity, FkTCardEntity cardEntity, FKTCardTZEntity cardAccEntity,
			FKTGuestAcc guestAccEntity) {
		// guestEntity.setCard(cardEntity);
		// guestEntity.setGuestAcc(guestAccEntity);
		// cardEntity.setCardTZEntity(cardAccEntity);
		// cardEntity.setGuestEntity(guestEntity);
		// guestAccEntity.setGuestEntity(guestEntity);
		// cardAccEntity.setCardEntity(cardEntity);
	}

	/**
	 * 将registerCustomerBean转换成FkTCardEntity
	 */
	private FkTCardEntity convertDataToCardEntity(RegisterCustomerBean registerCustomerBean) {

		FkTCardEntity fktCardEntity = new FkTCardEntity();
		fktCardEntity.setCardFlag(true);
		if (registerCustomerBean.getId() != null) {
			fktCardEntity.setId(registerCustomerBean.getId());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getGuestName())) {
			fktCardEntity.setGuestname(registerCustomerBean.getGuestName());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getGuestNo())) {
			fktCardEntity.setGuestNo(Integer.parseInt(registerCustomerBean.getGuestNo()));
		}
		// 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getCardNo())) {
			fktCardEntity.setCardno(registerCustomerBean.getCardNo());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getCardStatus())) {
			fktCardEntity.setCardstatus(registerCustomerBean.getCardStatus());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getGuestType())) {
			fktCardEntity.setGuesttype(registerCustomerBean.getGuestType());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getGuestNum())) {
			fktCardEntity.setGuestnum(registerCustomerBean.getGuestNum());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getGuestTel())) {
			fktCardEntity.setGuesttel(registerCustomerBean.getGuestTel());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getCreate_date())) {
			fktCardEntity.setCreateDate(Timestamp.valueOf(registerCustomerBean.getCreate_date()));
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getStationNo())) {
			fktCardEntity.setStationno(registerCustomerBean.getStationNo());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getCardExno())) {
			fktCardEntity.setCardexno(registerCustomerBean.getCardExno());
		}
		// 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getCardType())) {
			fktCardEntity.setCardtype(registerCustomerBean.getCardType());
		}
		// 不记名卡有值
		if (registerCustomerBean.getDeposit() != null) {
			fktCardEntity.setDeposit(registerCustomerBean.getDeposit());
		}
		// 不记名卡有值
		if (registerCustomerBean.getCardAmount() != null) {
			fktCardEntity.setCardbal(registerCustomerBean.getCardAmount());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getCardPass())) {
			fktCardEntity.setPassword(registerCustomerBean.getCardPass());
		}
		// 每次加油限量 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getRefuelLimit())) {
			fktCardEntity.setXvol(registerCustomerBean.getRefuelLimit());
		}
		// 每天加油次数 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getRefuelTimes())) {
			fktCardEntity.setXcount(registerCustomerBean.getRefuelTimes());
		}
		// 每天加油限额 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getConsumeAmount())) {
			fktCardEntity.setXamn(registerCustomerBean.getConsumeAmount());
		}
		// 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getOilTypeLimit())) {
			fktCardEntity.setXoil(registerCustomerBean.getOilTypeLimit());
		}
		// 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getEffectiveDate())) {
			fktCardEntity.setBegdate(DateUtil.formatStrTOStampBySmt(registerCustomerBean.getEffectiveDate(),
					DateUtil.DATE_PATTERN_17));
		}
		// 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getDisEffectiveDate())) {
			fktCardEntity.setEnddate(DateUtil.formatStrTOStampBySmt(registerCustomerBean.getDisEffectiveDate(),
					DateUtil.DATE_PATTERN_17));
		}
		// 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getStationInfoLimit())) {
			fktCardEntity.setXeare(registerCustomerBean.getStationInfoLimit());
		}
		// 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getRemark())) {
			fktCardEntity.setBz(registerCustomerBean.getRemark());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getGender())) {
			fktCardEntity.setGender(registerCustomerBean.getGender());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getEmail())) {
			fktCardEntity.setEmail(registerCustomerBean.getEmail());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getZipCode())) {
			fktCardEntity.setGuestpost(registerCustomerBean.getZipCode());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getCustomerAddr())) {
			fktCardEntity.setGuestadd(registerCustomerBean.getCustomerAddr());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getCarNoConstr())) {
			fktCardEntity.setXcarno(registerCustomerBean.getCarNoConstr());
		}
		// 部门编号
		if (StringUtils.isNotBlank(registerCustomerBean.getDeptNo())) {
			fktCardEntity.setDeptNum(Integer.parseInt(registerCustomerBean.getDeptNo()));
		}
		// 卡密码标识
		if (StringUtils.isNotBlank(registerCustomerBean.getPassFlag())) {
			// fktCardEntity.setPassFlag(registerCustomerBean.getPassFlag());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getBillType())) {
			fktCardEntity.setBillType(registerCustomerBean.getBillType());
		}
		// 站点编号 不记名卡有值
		if (StringUtils.isNotBlank(ApplicationContext.getInstance().getStationNum())) {
			fktCardEntity.setStationno(ApplicationContext.getInstance().getStationNum());
		}
		// 操作员编号 不记名卡有值
		if (StringUtils.isNotBlank(ApplicationContext.getInstance().getOperatorNo())) {
			fktCardEntity.setUserid(Integer.parseInt(ApplicationContext.getInstance().getOperatorNo()));
		}
		return fktCardEntity;
	}

	/**
	 * 将registerCustomerBean转换成fktGuestEntity
	 */
	private FkTGuestEntity covertDataToGuestEntity(RegisterCustomerBean registerCustomerBean) {
		FkTGuestEntity fktGuestEntity = new FkTGuestEntity();
		if (StringUtils.isNotBlank(registerCustomerBean.getGuestName())) {
			fktGuestEntity.setGuestname(registerCustomerBean.getGuestName());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getGuestNo())) {
			fktGuestEntity.setGuestno(Integer.parseInt(registerCustomerBean.getGuestNo()));
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getCorpType())) {
			fktGuestEntity.setGuesttype(registerCustomerBean.getCorpType());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getGuestTel())) {
			fktGuestEntity.setTel(registerCustomerBean.getGuestTel());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getEmail())) {
			fktGuestEntity.setEmail(registerCustomerBean.getEmail());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getZipCode())) {
			fktGuestEntity.setPost(registerCustomerBean.getZipCode());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getCustomerAddr())) {
			fktGuestEntity.setAdd(registerCustomerBean.getCustomerAddr());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getGuestStatus())) {
			fktGuestEntity.setStats(registerCustomerBean.getGuestStatus());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getContactName())) {
			fktGuestEntity.setName(registerCustomerBean.getContactName());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getContactType())) {
			fktGuestEntity.setIdcardType(registerCustomerBean.getContactType());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getContactNum())) {
			fktGuestEntity.setIdcardNum(registerCustomerBean.getContactNum());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getContactBir())) {
			fktGuestEntity.setBirthday(DateUtil.formatStrTOStampBySmt(registerCustomerBean.getContactBir(),
					DateUtil.DATE_PATTERN_17));
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getBankType())) {
			fktGuestEntity.setBankno(registerCustomerBean.getBankType());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getBankAcc())) {
			fktGuestEntity.setBankacc(registerCustomerBean.getBankAcc());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getTaxNum())) {
			fktGuestEntity.setTaxno(registerCustomerBean.getTaxNum());
		}
		// 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getRemark())) {
			fktGuestEntity.setBeizhu(registerCustomerBean.getRemark());
		}
		// 站点编号 不记名卡有值
		if (StringUtils.isNotBlank(ApplicationContext.getInstance().getStationNum())) {
			fktGuestEntity.setStationno(ApplicationContext.getInstance().getStationNum());
		}
		// 操作员编号 不记名卡有值
		if (StringUtils.isNotBlank(ApplicationContext.getInstance().getOperatorNo())) {
			fktGuestEntity.setUserid(Integer.parseInt(ApplicationContext.getInstance().getOperatorNo()));
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getCardNo())) {
			fktGuestEntity.setCardno(registerCustomerBean.getCardNo());
		}
		return fktGuestEntity;
	}

	/**
	 * 将registerCustomerBean转换成fktGuestDepEntity
	 */
	private FKTGuestDep covertDataToGuestDepEntity(RegisterCustomerBean registerCustomerBean) {
		FKTGuestDep fktGuestDepEntity = new FKTGuestDep();
		if (registerCustomerBean.getId() != null) {
			fktGuestDepEntity.setId(registerCustomerBean.getId());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getGuestNo())) {
			fktGuestDepEntity.setGuestNo(registerCustomerBean.getGuestNo());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getDeptNo())) {
			fktGuestDepEntity.setDeptNo(registerCustomerBean.getDeptNo());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getDepName())) {
			fktGuestDepEntity.setDeptName(registerCustomerBean.getDepName());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getDepMaster())) {
			fktGuestDepEntity.setContactName(registerCustomerBean.getDepMaster());
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getDepTel())) {
			fktGuestDepEntity.setContactPhone(Integer.parseInt(registerCustomerBean.getDepTel()));
		}
		if (StringUtils.isNotBlank(registerCustomerBean.getLimitStation())) {
			fktGuestDepEntity.setStationLimit(registerCustomerBean.getLimitStation());
		}
		return fktGuestDepEntity;
	}

	/**
	 * 将registerCustomerBean转换成fktCardTZEntity 2014-7-25
	 */
	private FKTCardTZEntity covertDataToCardAccEntity(RegisterCustomerBean registerCustomerBean) {
		FKTCardTZEntity fktCardTZEntity = new FKTCardTZEntity();
		// 不记名卡有值
		if (StringUtils.isNotBlank(registerCustomerBean.getCardNo())) {
			fktCardTZEntity.setCardNo(registerCustomerBean.getCardNo());
		}
		// 不记名卡有值
		if (registerCustomerBean.getCardAmount() != null) {
			fktCardTZEntity.setCardbal(registerCustomerBean.getCardAmount());
		}
		// 操作员编号 不记名卡有值
		if (StringUtils.isNotBlank(ApplicationContext.getInstance().getOperatorNo())) {
			fktCardTZEntity.setUserid(Integer.parseInt(ApplicationContext.getInstance().getOperatorNo()));
		}
		return fktCardTZEntity;
	}

	/**
	 * 将registerCustomerBean转换成FKTGuestAccEntity 2014-7-25
	 */
	private FKTGuestAcc covertDataToGuestAccEntity(RegisterCustomerBean registerCustomerBean) {
		FKTGuestAcc fktGuestAccEntity = new FKTGuestAcc();
		// 不记名卡有值
		if (registerCustomerBean.getCardAmount() != null) {
			fktGuestAccEntity.setCardacc(registerCustomerBean.getCardAmount());
		}
		return fktGuestAccEntity;
	}

	// ------- Static Methods --------------------------------------------------

	// ------- Optional Inner Class ------------------------------------------

}
