package com.fr.station.component.card.dao.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.QueryException;
import org.springframework.stereotype.Repository;

import com.fr.station.common.bean.CardMaintainBean;
import com.fr.station.common.consts.SqlConsts;
import com.fr.station.common.data.ApplicationContext;
import com.fr.station.common.entity.report.OperatelogEntity;
import com.fr.station.common.utility.ErrorLogUtil;
import com.fr.station.component.card.dao.CardMaintainDAO;
import com.fr.station.component.system.dao.AbstractBaseDAO;

/**
 * 卡信息维护的DAO的实现
 * 
 * @author _yy
 */
@Repository
public class CardMaintainDaoImpl extends AbstractBaseDAO<OperatelogEntity> implements CardMaintainDAO {

	// ------- Constants (static final) ----------------------------------------
	private static Logger log = Logger.getLogger(CardMaintainDaoImpl.class);

	// ------- Static Variables (static) ---------------------------------------
	private static final String CARD_NO = "cardno";

	private static final String GUEST_NAME = "guestName";

	private static final String GUEST_NO = "guestNo";

	private static final String GUEST_TYPE = "guestType";

	private static final String GUEST_NUM = "guestNum";

	private static final String ID = "id";

	private static final String GUEST_GUEST_NO = "guest.guestno";

	private static final String CARD_ID = "card.id";

	private static final String CARD_GUEST_NO = "card.guestNo";

	private static final String CARDACC_CARD_ID = "cardacc.cardId";

	private static final String CARD_CARD_NO = "card.cardno";

	private static final String CARD_STATION_NO = "card.stationNo";

	private static final String STATION_NO = "stationNo";

	// ------- Instance Variables (private) ------------------------------------
	/**
	 * 卡信息维护查询按钮的SQL
	 */
	private final String selectOperateLogViewSql = "SELECT card.guestname,card.guestno,card.cardno,card.guesttype,"
			+ "card.guestnum,card.enddate,card.cardtype,card.cardstatus,card.id  FROM FK_T_CARD card WHERE ";

	/**
	 * 卡信息维护查询按钮的SQL
	 */
	private final String selectAllCountOperateLogViewSql = "SELECT count(*) FROM FK_T_CARD card WHERE ";

	/**
	 * 挂失卡的SQL，置卡状态位为2
	 */
	String cardLostSql = "UPDATE FK_T_CARD SET CARDSTATUS='2' WHERE cardNo=? AND guestType=? AND guestNum=?";

	/**
	 * 止挂卡的SQL，置卡状态位为1
	 */
	String cancelLossCardSql = "UPDATE FK_T_CARD SET CARDSTATUS='1' WHERE cardNo=? AND guestType=? AND guestNum=?";

	/**
	 * 修改密码的SQL
	 */
	String changePassSql = "UPDATE FK_T_CARD SET PASSWORD=? WHERE cardNo=? ";

	/**
	 * 换卡的SQL，更换FK_T_CARD表中的卡号
	 */
	String replaceCard1Sql = "UPDATE FK_T_CARD SET CARDNO=?,cardstatus= '1' WHERE CARDNO=?";

	/**
	 * 换卡的SQL，更换FK_T_GUEST表中的卡号
	 */
	String replaceCard2Sql = "UPDATE FK_T_GUEST SET CARDNO = ? WHERE GUESTNO IN (SELECT GUESTNO FROM FK_T_CARD WHERE CARDNO = ?)";

	/**
	 * 通过ID查询需要挂失的卡的信息，SQL
	 */
	private final String getCardLostSql = "SELECT card.cardNo,card.guestName,card.guestNum,card.guestType,"
			+ "card.guestno,card.endDate,card.cardType,card.cardStatus,card.id,card.deposit,card.stationno,"
			+ "card.create_date FROM FK_T_CARD card WHERE ";

	/**
	 * 得到补办卡时旧卡的信息，SQL
	 */
	private final String getExistCardSql = "SELECT card.cardNo,card.guestName,card.guestno,card.guesttype,card.guestnum,"
			+ "guest.guestName coperGuestName,card.xcarno,card.xcount,card.xvol,cardAcc.pre,card.cardType,card.cardStatus,card.deposit,cardAcc.score,card.stationno "
			+ "FROM FK_T_CARD card,FK_T_GUEST guest,FK_T_CardTZ cardAcc  WHERE  ";

	/**
	 * 得到修改密码的卡的信息，SQL
	 */
	private final String getChangePassSql = "SELECT card.cardNo,card.endDate,card.guestno,card.guestName,card.guestNum,card.cardType,card.deposit,card.passFlag,card.stationno  "
			+ " FROM FK_T_CARD card WHERE ";

	/**
	 * cardMaintain_replace 通过ID查询需要更改密码的卡的旧密码来进行核对，SQL
	 */
	private final String getPassSql = "SELECT card.password,card.cardNo FROM FK_T_CARD card WHERE ";

	// ------- Constructors ----------------------------------------------------

	public CardMaintainDaoImpl() {
		super();
	}

	// ------- Instance Methods (public) ---------------------------------------

	/**
	 * 得到卡维护信息的函数
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<CardMaintainBean> getCardMaintainRecordsByCriteria(CardMaintainBean cardMaintainBean) {
		List<CardMaintainBean> resultList = null;
		try {
			// retrieve search value from client request.
			StringBuilder builder = this.validateInputCriteria(cardMaintainBean);

			// retrieve current query by input sql.
			Query query = this.createSpecifiedQuery(builder, this.selectOperateLogViewSql);

			// get total records by specified sql.
			int totalSize = this.getTotalCount(builder, this.selectAllCountOperateLogViewSql);

			// this is for pagination.
			this.setPaginationNumber(cardMaintainBean, query);

			// get result list.
			List<Object[]> result = query.list();

			resultList = this.convertDataToBean(result, totalSize);
		} catch (QueryException e) {
			log.info("Sql is not correct, please check it again, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		} catch (Exception e) {
			log.info("Get card maintain data occured error, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		}
		return resultList;
	}

	/**
	 * 得到挂失卡信息
	 */
	@SuppressWarnings({ "unchecked" })
	@Override
	public List<CardMaintainBean> getCardLostInfo(CardMaintainBean cardMaintainBean) throws Exception {
		List<CardMaintainBean> resultList = null;
		try {
			// retrieve search value from client request.
			StringBuilder builder = this.validateInputCardCriteria(cardMaintainBean);

			// retrieve current query by input sql.
			Query query = this.createSpecifiedQuery(builder, this.getCardLostSql);

			// get result list.
			List<Object[]> result = query.list();

			resultList = this.convertDataToBean(result);
		} catch (QueryException e) {
			log.info("Get cardLost data occured error, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		}
		return resultList;
	}

	/**
	 * 得到止挂卡信息
	 */
	@SuppressWarnings({ "unchecked" })
	@Override
	public List<CardMaintainBean> getCancelLossCardInfo(CardMaintainBean cardMaintainBean) throws Exception {
		List<CardMaintainBean> resultList = null;
		try {
			// retrieve search value from client request.
			StringBuilder builder = this.validateInputCardCriteria(cardMaintainBean);

			// retrieve current query by input sql.
			Query query = this.createSpecifiedQuery(builder, this.getCardLostSql);

			// get result list.
			List<Object[]> result = query.list();

			resultList = this.convertDataToBean(result);
		} catch (QueryException e) {
			log.info("Get cancelLossCard data occured error, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		}
		return resultList;
	}

	/**
	 * 得到修改密码的信息
	 */

	@SuppressWarnings({ "unchecked" })
	@Override
	public List<CardMaintainBean> getChangePassInfo(CardMaintainBean cardMaintainBean) throws Exception {
		List<CardMaintainBean> resultList = null;
		try {
			// retrieve search value from client request.
			StringBuilder builder = this.validateInputCardCriteria(cardMaintainBean);

			// retrieve current query by input sql.
			Query query = this.createSpecifiedQuery(builder, this.getChangePassSql);

			// get result list.
			List<Object[]> result = query.list();

			resultList = this.convertChangePassDataToBean(result);
		} catch (QueryException e) {
			log.info("Get changepass data occured error, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		}
		return resultList;
	}

	/**
	 * 检测密码是否正确
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<CardMaintainBean> getPassInfo(CardMaintainBean cardMaintainBean) {
		List<CardMaintainBean> resultList = null;
		try {
			// retrieve search value from client request.
			StringBuilder builder = this.validateInputCriteria(cardMaintainBean);

			// retrieve current query by input sql.
			Query query = this.createSpecifiedQuery(builder, this.getPassSql);

			// get result list.
			List<Object[]> result = query.list();

			resultList = this.convertExistPassDataToBean(result);
		} catch (QueryException e) {
			log.info("Sql is not correct, please check it again, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		} catch (Exception e) {
			log.info("check pass  occured error, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		}
		return resultList;
	}

	/**
	 * 获取补卡时旧卡信息
	 */

	@SuppressWarnings({ "unchecked" })
	@Override
	public List<CardMaintainBean> getExistCardInfo(CardMaintainBean cardMaintainBean) throws Exception {
		List<CardMaintainBean> resultList = null;
		try {
			// retrieve search value from client request.
			StringBuilder builder = this.validateExistInputCard(cardMaintainBean);

			// retrieve current query by input sql.
			Query query = this.createSpecifiedQuery(builder, this.getExistCardSql);

			// get result list.
			List<Object[]> result = query.list();

			resultList = this.convertExistCardDataToBean(result);
		} catch (QueryException e) {
			log.info("Get exist card data occured error, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		}
		return resultList;
	}

	/**
	 * 更新挂失卡的卡状态
	 */
	@Override
	public void updateCardLost(CardMaintainBean cardMaintainBean, Object... args) {
		this.upateBySql(this.cardLostSql, args);
	}

	/**
	 * 更新止挂卡的卡状态
	 */
	@Override
	public void updateCancelLossCard(CardMaintainBean cardMaintainBean, Object... args) {
		this.upateBySql(this.cancelLossCardSql, args);
	}

	/**
	 * 更新修改后的密码
	 */
	@Override
	public void updateChangePass(CardMaintainBean cardMaintainBean, Object... args) {
		this.upateBySql(this.changePassSql, args);
	}

	/**
	 * 更新补卡卡号
	 */
	@Override
	public void updateReplaceCard(CardMaintainBean cardMaintainBean, Object... args) {
		this.upateBySql(this.replaceCard1Sql, args);
		this.upateBySql(this.replaceCard2Sql, args);
	}

	// ------- Instance Methods (private) --------------------------------------
	/**
	 * 增加卡信息维护的SQL判断条件
	 */
	private StringBuilder validateInputCriteria(CardMaintainBean cardMaintainBean) {
		StringBuilder builder = new StringBuilder();
		builder.append(STATION_NO).append(SqlConsts.EQUAL)
				.append(Integer.valueOf(ApplicationContext.getInstance().getStationNum()));
		// 以下为where后面的判断条件
		// cardNo卡号
		if (StringUtils.isNotEmpty(cardMaintainBean.getCardNo())) {
			builder.append(SqlConsts.ADD).append(CARD_NO).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardMaintainBean.getCardNo()).append(SqlConsts.SINGLE_QUOTES);
		}
		// guestName客户名称
		if (StringUtils.isNotEmpty(cardMaintainBean.getGuestName())) {
			builder.append(SqlConsts.ADD).append(GUEST_NAME).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardMaintainBean.getGuestName()).append(SqlConsts.SINGLE_QUOTES);
		}
		// guestNo 客户编号
		if (StringUtils.isNotEmpty(cardMaintainBean.getGuestNo())) {
			builder.append(SqlConsts.ADD).append(GUEST_NO).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardMaintainBean.getGuestNo()).append(SqlConsts.SINGLE_QUOTES);
		}
		// guestType证件类型
		if (StringUtils.isNotEmpty(cardMaintainBean.getGuestType())) {
			builder.append(SqlConsts.ADD).append(GUEST_TYPE).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardMaintainBean.getGuestType()).append(SqlConsts.SINGLE_QUOTES);
		}
		// guestNum证件号
		if (StringUtils.isNotEmpty(cardMaintainBean.getGuestNum())) {
			builder.append(SqlConsts.ADD).append(GUEST_NUM).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardMaintainBean.getGuestNum()).append(SqlConsts.SINGLE_QUOTES);
		}
		return builder;
	}

	/**
	 * 增加挂失卡的SQL判断条件
	 */
	private StringBuilder validateInputCardCriteria(CardMaintainBean cardMaintainBean) {
		StringBuilder builder = new StringBuilder();
		builder.append(STATION_NO).append(SqlConsts.EQUAL)
				.append(Integer.valueOf(ApplicationContext.getInstance().getStationNum()));
		// 以下为where后面的判断条件
		// ID
		if (cardMaintainBean.getId() != null) {
			builder.append(SqlConsts.ADD).append(ID).append(SqlConsts.EQUAL).append(cardMaintainBean.getId());
		}
		// cardNo 卡号
		if (StringUtils.isNotEmpty(cardMaintainBean.getCardNo())) {
			builder.append(SqlConsts.ADD).append(CARD_NO).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardMaintainBean.getCardNo()).append(SqlConsts.SINGLE_QUOTES);
		}
		// guestName 客户名称
		if (StringUtils.isNotEmpty(cardMaintainBean.getGuestName())) {
			builder.append(SqlConsts.ADD).append(GUEST_NAME).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardMaintainBean.getGuestName()).append(SqlConsts.SINGLE_QUOTES);
		}
		// guestNo 客户编号
		if (StringUtils.isNotEmpty(cardMaintainBean.getGuestNo())) {
			builder.append(SqlConsts.ADD).append(GUEST_NO).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardMaintainBean.getGuestNo()).append(SqlConsts.SINGLE_QUOTES);
		}
		// guestType证件类型
		if (StringUtils.isNotEmpty(cardMaintainBean.getGuestType())) {
			builder.append(SqlConsts.ADD).append(GUEST_TYPE).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardMaintainBean.getGuestType()).append(SqlConsts.SINGLE_QUOTES);
		}
		// guestNum 从页面获取证件号
		if (StringUtils.isNotEmpty(cardMaintainBean.getGuestNum())) {
			builder.append(SqlConsts.ADD).append(GUEST_NUM).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardMaintainBean.getGuestNum()).append(SqlConsts.SINGLE_QUOTES);
		}
		return builder;
	}

	/**
	 * 增加查询旧卡的SQL判断条件
	 */
	private StringBuilder validateExistInputCard(CardMaintainBean cardMaintainBean) {
		StringBuilder builder = new StringBuilder();
		// FK_T_CARD,FK_T_GUEST,FK_T_CARDTZ表关联
		// FK_T_CARD,FK_T_GUEST通过客户编号关联，FK_T_CARD，FK_T_CARDTZ通过card的ID关联
		builder.append(CARD_STATION_NO).append(SqlConsts.EQUAL)
				.append(Integer.valueOf(ApplicationContext.getInstance().getStationNum()));
		builder.append(SqlConsts.ADD).append(GUEST_GUEST_NO).append(SqlConsts.EQUAL).append(CARD_GUEST_NO)
				.append(SqlConsts.ADD).append(CARDACC_CARD_ID).append(SqlConsts.EQUAL).append(CARD_ID);
		if (StringUtils.isNotEmpty(cardMaintainBean.getCardNo())) {
			builder.append(SqlConsts.ADD).append(CARD_CARD_NO).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardMaintainBean.getCardNo()).append(SqlConsts.SINGLE_QUOTES);
		}
		return builder;
	}

	/**
	 * 卡信息维护，data转换为bean
	 */
	private List<CardMaintainBean> convertDataToBean(List<Object[]> dataResult, int totalAccount) {
		List<CardMaintainBean> cardMaintainBeanList = new ArrayList<CardMaintainBean>();
		CardMaintainBean cardMaintainBean = null;
		for (Object[] dataRow : dataResult) {
			cardMaintainBean = new CardMaintainBean();
			if (dataRow[0] != null) {
				cardMaintainBean.setGuestName(String.valueOf(dataRow[0]));
			}
			if (dataRow[1] != null) {
				cardMaintainBean.setGuestNo(String.valueOf(dataRow[1]));
			}
			if (dataRow[2] != null) {
				cardMaintainBean.setCardNo(String.valueOf(dataRow[2]));
			}
			if (dataRow[3] != null) {
				cardMaintainBean.setGuestType(String.valueOf(dataRow[3]));
			}
			if (dataRow[4] != null) {
				cardMaintainBean.setGuestNum(String.valueOf(dataRow[4]));
			}
			if (dataRow[5] != null) {
				cardMaintainBean.setDisEffectiveDate(String.valueOf(dataRow[5]).substring(0, 10));
			}
			if (dataRow[6] != null) {
				cardMaintainBean.setCardType(String.valueOf(dataRow[6]));
			}
			if (dataRow[7] != null) {
				cardMaintainBean.setCardStatus(String.valueOf(dataRow[7]));
			}
			if (dataRow[8] != null) {
				cardMaintainBean.setId((int) (dataRow[8]));
			}
			cardMaintainBean.setTotalData(totalAccount);
			cardMaintainBeanList.add(cardMaintainBean);
		}
		return cardMaintainBeanList;
	}

	/**
	 * 挂失卡，data转换为bean，和上一个函数的重载
	 */
	private List<CardMaintainBean> convertDataToBean(List<Object[]> dataResult) {
		List<CardMaintainBean> cardMaintainBeanList = new ArrayList<CardMaintainBean>();
		CardMaintainBean cardMaintainBean = null;
		for (Object[] dataRow : dataResult) {
			cardMaintainBean = new CardMaintainBean();
			if (dataRow[0] != null) {
				cardMaintainBean.setCardNo(String.valueOf(dataRow[0]));
			}
			if (dataRow[1] != null) {
				cardMaintainBean.setGuestName(String.valueOf(dataRow[1]));
			}
			if (dataRow[2] != null) {
				cardMaintainBean.setGuestNum(String.valueOf(dataRow[2]));
			}
			if (dataRow[3] != null) {
				cardMaintainBean.setGuestType(String.valueOf(dataRow[3]));
			}
			if (dataRow[4] != null) {
				cardMaintainBean.setGuestNo(String.valueOf(dataRow[4]));
			}
			if (dataRow[5] != null) {
				cardMaintainBean.setDisEffectiveDate(String.valueOf(dataRow[5]).substring(0, 10));
			}
			if (dataRow[6] != null) {
				cardMaintainBean.setCardType(String.valueOf(dataRow[6]));
			}
			if (dataRow[7] != null) {
				cardMaintainBean.setCardStatus(String.valueOf(dataRow[7]));
			}
			if (dataRow[8] != null) {
				cardMaintainBean.setId(Integer.valueOf(String.valueOf(dataRow[8])));
			}
			if (dataRow[9] != null) {
				cardMaintainBean.setDeposit(((BigDecimal) dataRow[9]));
			}
			if (dataRow[10] != null) {
				cardMaintainBean.setStationNo(String.valueOf(dataRow[10]));
			}
			if (dataRow[11] != null) {
				cardMaintainBean.setCreateDate(String.valueOf(dataRow[11]).substring(0, 10));
			}
			cardMaintainBeanList.add(cardMaintainBean);

		}
		return cardMaintainBeanList;
	}

	/**
	 * 检测旧卡信息,data转换为bean
	 */
	private List<CardMaintainBean> convertExistCardDataToBean(List<Object[]> dataResult) {
		List<CardMaintainBean> cardMaintainBeanList = new ArrayList<CardMaintainBean>();
		CardMaintainBean cardMaintainBean = null;
		for (Object[] dataRow : dataResult) {
			cardMaintainBean = new CardMaintainBean();
			if (dataRow[0] != null) {
				cardMaintainBean.setCardNo(String.valueOf(dataRow[0]));
			}
			if (dataRow[1] != null) {
				cardMaintainBean.setGuestName(String.valueOf(dataRow[1]));
			}
			if (dataRow[2] != null) {
				cardMaintainBean.setGuestNo(String.valueOf(dataRow[2]));
			}
			if (dataRow[3] != null) {
				cardMaintainBean.setGuestType(String.valueOf(dataRow[3]));
			}
			if (String.valueOf(dataRow[3]).equals("07")) {
				if (dataRow[4] != null) {
					cardMaintainBean.setCompanyNum(String.valueOf(dataRow[4]));
				}
			} else if (dataRow[4] != null) {
				cardMaintainBean.setGuestNum(String.valueOf(dataRow[4]));
			}
			if (dataRow[5] != null) {
				cardMaintainBean.setCompanyName(String.valueOf(dataRow[5]));
			}
			if (dataRow[6] != null) {
				cardMaintainBean.setCarNo(String.valueOf(dataRow[6]));
			}
			if (dataRow[7] != null) {
				cardMaintainBean.setRefuelTimes(String.valueOf(dataRow[7]));
			}
			if (dataRow[8] != null) {
				cardMaintainBean.setRefuelLimit(String.valueOf(dataRow[8]));
			}
			if (dataRow[9] != null) {
				cardMaintainBean.setProvisionAccount(String.valueOf(dataRow[9]));
			}
			if (dataRow[10] != null) {
				cardMaintainBean.setCardType(String.valueOf(dataRow[10]));
				cardMaintainBean.setNewCardType(String.valueOf(dataRow[10]));
			}
			if (dataRow[11] != null) {
				cardMaintainBean.setCardStatus(String.valueOf(dataRow[11]));
			}
			if (dataRow[12] != null) {
				cardMaintainBean.setDeposit(((BigDecimal) dataRow[12]));
			}
			if (dataRow[13] != null) {
				cardMaintainBean.setScore(String.valueOf(dataRow[13]));
			}
			if (dataRow[14] != null) {
				cardMaintainBean.setStationNo(String.valueOf(dataRow[14]));
			}
			cardMaintainBeanList.add(cardMaintainBean);
		}
		return cardMaintainBeanList;
	}

	/**
	 * 检测密码 将密码信息转化为bean
	 */
	private List<CardMaintainBean> convertChangePassDataToBean(List<Object[]> dataResult) {
		List<CardMaintainBean> cardMaintainBeanList = new ArrayList<CardMaintainBean>();
		CardMaintainBean cardMaintainBean = null;
		for (Object[] dataRow : dataResult) {
			cardMaintainBean = new CardMaintainBean();
			if (dataRow[0] != null) {
				cardMaintainBean.setCardNo(String.valueOf(dataRow[0]));
			}
			if (dataRow[1] != null) {
				cardMaintainBean.setDisEffectiveDate(String.valueOf(dataRow[1]).substring(0, 10));
			}
			if (dataRow[2] != null) {
				cardMaintainBean.setGuestNo(String.valueOf(dataRow[2]));
			}
			if (dataRow[3] != null) {
				cardMaintainBean.setGuestName(String.valueOf(dataRow[3]));
			}
			if (dataRow[4] != null) {
				cardMaintainBean.setGuestNum(String.valueOf(dataRow[4]));
			}
			if (dataRow[5] != null) {
				cardMaintainBean.setCardType(String.valueOf(dataRow[5]));
			}
			if (dataRow[6] != null) {
				cardMaintainBean.setDeposit(((BigDecimal) dataRow[6]));
			}
			if (dataRow[7] != null) {
				cardMaintainBean.setPassFlag(String.valueOf(dataRow[7]));
			}
			if (dataRow[8] != null) {
				cardMaintainBean.setStationNo(String.valueOf(dataRow[8]));
			}
			cardMaintainBeanList.add(cardMaintainBean);
		}
		return cardMaintainBeanList;
	}

	/**
	 * 检测密码将密码信息转换为bean
	 */

	private List<CardMaintainBean> convertExistPassDataToBean(List<Object[]> dataResult) {
		List<CardMaintainBean> cardMaintainBeanList = new ArrayList<CardMaintainBean>();
		CardMaintainBean cardMaintainBean = null;
		for (Object[] dataRow : dataResult) {
			cardMaintainBean = new CardMaintainBean();
			if (dataRow[0] != null) {
				cardMaintainBean.setCardPass(String.valueOf(dataRow[0]));
			}
			cardMaintainBeanList.add(cardMaintainBean);
		}
		return cardMaintainBeanList;
	}

	private void setPaginationNumber(CardMaintainBean cardMaintainBean, Query query) {
		query.setFirstResult(cardMaintainBean.getStartNumber());
		query.setMaxResults(cardMaintainBean.getTotalNumber());
	}

	private int getTotalCount(StringBuilder builder, String sql) throws Exception {
		List<?> dataResultList = this.findBySql(new StringBuilder().append(sql).append(builder).toString());
		if (dataResultList.size() > 0) {
			return (int) dataResultList.toArray()[0];
		}
		return 0;
	}

	private Query createSpecifiedQuery(StringBuilder builder, String sql) throws Exception {
		return this.getQueryByCriteria(new StringBuilder().append(sql).append(builder).toString());
	}

	// ------- Static Methods --------------------------------------------------

	// ------- Optional Inner Class ------------------------------------------

}
