package com.fr.station.component.card.dao.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.QueryException;
import org.springframework.stereotype.Repository;

import com.fr.station.common.bean.CardDetailBean;
import com.fr.station.common.consts.SqlConsts;
import com.fr.station.common.data.ApplicationContext;
import com.fr.station.common.entity.report.OperatelogEntity;
import com.fr.station.common.utility.ErrorLogUtil;
import com.fr.station.component.card.dao.CardDetailDAO;
import com.fr.station.component.system.dao.AbstractBaseDAO;

/**
 * 卡片明细的DAO的实现
 * 
 * @author _yy
 */
@Repository
public class CardDetailDaoImpl extends AbstractBaseDAO<OperatelogEntity> implements CardDetailDAO {

	// ------- Constants (static final) ----------------------------------------
	private static Logger log = Logger.getLogger(CardDetailDaoImpl.class);

	// ------- Static Variables (static) ---------------------------------------
	private static final String GUEST_GUEST_NO = "guest.guestno";

	private static final String CARD_GUEST_NO = "card.guestno";

	private static final String CARDACC_CARD_ID = "cardAcc.cardid";

	private static final String CARD_ID = "card.id";

	private static final String GUESTACC_GUEST_NO = "guestAcc.guestno";

	private static final String CARD_CARD_NO = "card.cardno";

	private static final String GUEST_TEL = "guest.tel";

	private static final String CARD_GUEST_NAME = "card.guestname";

	private static final String GUEST_GUEST_NAME = "guest.guestname";

	private static final String CARD_GUEST_TYPE = "card.guesttype";

	private static final String CARD_GUEST_NUM = "card.guestnum";

	private static final String STATION_NO = "card.stationNo";

	// ------- Instance Variables (private) ------------------------------------
	/**
	 * 查询卡片明细SQL
	 */
	private final String getCardDetailSql = "SELECT card.cardNo,card.guestName cardGuestName,guest.tel,"
			+ "card.guestType,card.guestNum,guest.guestName coperGuestName,guest.post,card.email,"
			+ "card.guestAdd,card.cardType,card.cardStatus,card.cardExno,cardAcc.cardBal,"
			+ "cardAcc.score,guestAcc.bal,cardAcc.create_date,cardAcc.update_date,card.xoil,card.xvol,"
			+ "card.xcount,card.xamn,card.xcarno,card.xeare,guestAcc.score coperScore FROM FK_T_CARD card,"
			+ "FK_T_GUEST guest,FK_T_CARDTZ cardAcc,FK_T_GUESTACC guestAcc WHERE  ";

	// ------- Constructors ----------------------------------------------------

	public CardDetailDaoImpl() {
		super();
	}

	// ------- Instance Methods (public) ---------------------------------------

	/**
	 * list 得到卡片明细的内容
	 */
	@Override
	public List<CardDetailBean> getCardDetailInfo(CardDetailBean cardDetailBean) throws Exception {
		List<CardDetailBean> resultList = null;
		try {
			// retrieve search value from client request.
			StringBuilder builder = this.validateInputCardCriteria(cardDetailBean);

			// retrieve current query by input sql.
			Query query = this.createSpecifiedQuery(builder, this.getCardDetailSql);

			// get result list.
			List<Object[]> result = query.list();

			resultList = this.convertDataToBean(result);
		} catch (QueryException e) {
			log.info("Sql is not correct, please check it again, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		} catch (Exception e) {
			log.info("Get card detail info occured error, more detail please see the detail log" + e.getMessage() + "\n"
					+ ErrorLogUtil.printInfo(e));
		}
		return resultList;
	}

	// ------- Instance Methods (private) --------------------------------------

	/**
	 * 增加SQL判断条件
	 */
	private StringBuilder validateInputCardCriteria(CardDetailBean cardDetailBean) {
		StringBuilder builder = new StringBuilder();
		// FK_T_CARD,FK_T_GUEST,FK_T_CARDTZ,FK_T_GUESTACC表关联
		// FK_T_CARD,FK_T_GUEST通过客户编号guestNo关联，FK_T_CARD，FK_T_CARDTZ通过card的ID关联
		// FK_T_GUEST,FK_T_GUESTACC通过客户编号guestNo关联
		builder.append(STATION_NO).append(SqlConsts.EQUAL)
				.append(Integer.valueOf(ApplicationContext.getInstance().getStationNum()));
		builder.append(SqlConsts.ADD).append(GUEST_GUEST_NO).append(SqlConsts.EQUAL).append(CARD_GUEST_NO)
				.append(SqlConsts.ADD).append(CARDACC_CARD_ID).append(SqlConsts.EQUAL).append(CARD_ID).append(SqlConsts.ADD)
				.append(GUESTACC_GUEST_NO).append(SqlConsts.EQUAL).append(CARD_GUEST_NO);
		if (StringUtils.isNotEmpty(cardDetailBean.getCardNo())) {
			builder.append(SqlConsts.ADD).append(CARD_CARD_NO).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardDetailBean.getCardNo()).append(SqlConsts.SINGLE_QUOTES);
		} else if (StringUtils.isNotEmpty(cardDetailBean.getGuestTel())) {
			builder.append(SqlConsts.ADD).append(GUEST_TEL).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardDetailBean.getGuestTel()).append(SqlConsts.SINGLE_QUOTES);
		} else if (StringUtils.isNotEmpty(cardDetailBean.getGuestName())) {
			builder.append(SqlConsts.ADD).append(CARD_GUEST_NAME).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardDetailBean.getGuestName()).append(SqlConsts.SINGLE_QUOTES);
		} else if (StringUtils.isNotEmpty(cardDetailBean.getCompanyName())) {
			builder.append(SqlConsts.ADD).append(GUEST_GUEST_NAME).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardDetailBean.getCompanyName()).append(SqlConsts.SINGLE_QUOTES);
		} else if (StringUtils.isNotEmpty(cardDetailBean.getGuestType())
				&& StringUtils.isNotEmpty(cardDetailBean.getGuestNum())) {
			builder.append(SqlConsts.ADD).append(CARD_GUEST_TYPE).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardDetailBean.getGuestType()).append(SqlConsts.SINGLE_QUOTES);
			builder.append(SqlConsts.ADD).append(CARD_GUEST_NUM).append(SqlConsts.EQUAL).append(SqlConsts.SINGLE_QUOTES)
					.append(cardDetailBean.getGuestNum()).append(SqlConsts.SINGLE_QUOTES);
		}
		return builder;
	}

	/**
	 * 将data转换为bean
	 */
	private List<CardDetailBean> convertDataToBean(List<Object[]> dataResult) {
		List<CardDetailBean> cardDetailBeanList = new ArrayList<CardDetailBean>();
		CardDetailBean cardDetailBean = null;
		for (Object[] dataRow : dataResult) {
			cardDetailBean = new CardDetailBean();
			if (dataRow[0] != null) {
				cardDetailBean.setCardNo(String.valueOf(dataRow[0]));
			}
			if (dataRow[1] != null) {
				cardDetailBean.setGuestName(String.valueOf(dataRow[1]));
			}
			if (dataRow[2] != null) {
				cardDetailBean.setGuestTel(String.valueOf(dataRow[2]));
			}
			if (dataRow[3] != null) {
				cardDetailBean.setGuestType(String.valueOf(dataRow[3]));
			}
			if (dataRow[4] != null) {
				cardDetailBean.setGuestNum(String.valueOf(dataRow[4]));
			}
			if (dataRow[5] != null) {
				cardDetailBean.setCompanyName(String.valueOf(dataRow[5]));
			}
			if (dataRow[6] != null) {
				cardDetailBean.setZipCode(String.valueOf(dataRow[6]));
			}
			if (dataRow[7] != null) {
				cardDetailBean.setEmail(String.valueOf(dataRow[7]));
			}
			if (dataRow[8] != null) {
				cardDetailBean.setCustomerAddr(String.valueOf(dataRow[8]));
			}
			if (dataRow[9] != null) {
				cardDetailBean.setCardType(String.valueOf(dataRow[9]));
			}
			if (dataRow[10] != null) {
				cardDetailBean.setCardStatus(String.valueOf(dataRow[10]));
			}
			if (dataRow[11] != null) {
				cardDetailBean.setPrintNumber(String.valueOf(dataRow[11]));
			}
			if (dataRow[12] != null) {
				cardDetailBean.setCardAmount((BigDecimal) (dataRow[12]));
			}
			if (dataRow[13] != null) {
				cardDetailBean.setScore(String.valueOf(dataRow[13]));
			}
			if (dataRow[14] != null) {
				cardDetailBean.setProvisionAccount(String.valueOf(dataRow[14]));
			}
			if (dataRow[15] != null) {
				cardDetailBean.setCreateDate(String.valueOf(dataRow[15]).substring(0, 10));
			}
			if (dataRow[16] != null) {
				cardDetailBean.setUpdateDate(String.valueOf(dataRow[16]).substring(0, 10));
			}
			if (dataRow[17] != null) {
				cardDetailBean.setOilTypeLimit(String.valueOf(dataRow[17]));
			}
			if (dataRow[18] != null) {
				cardDetailBean.setRefuelLimit(String.valueOf(dataRow[18]));
			}
			if (dataRow[19] != null) {
				cardDetailBean.setRefuelTimes(String.valueOf(dataRow[19]));
			}
			if (dataRow[20] != null) {
				cardDetailBean.setConsumeAmount(String.valueOf(dataRow[20]));
			}
			if (dataRow[21] != null) {
				cardDetailBean.setCarNoConstr(String.valueOf(dataRow[21]));
			}
			if (dataRow[22] != null) {
				cardDetailBean.setStationInfoLimit(String.valueOf(dataRow[22]));
			}
			if (dataRow[23] != null) {
				cardDetailBean.setProvisionScore(String.valueOf(dataRow[23]));
			}
			cardDetailBeanList.add(cardDetailBean);
		}
		return cardDetailBeanList;
	}

	private Query createSpecifiedQuery(StringBuilder builder, String sql) throws Exception {
		return this.getQueryByCriteria(new StringBuilder().append(sql).append(builder).toString());
	}

	// ------- Static Methods --------------------------------------------------

	// ------- Optional Inner Class ------------------------------------------

}
